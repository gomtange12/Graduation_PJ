1. 멀티쓰레드사용 - 접속된 사용자의 수만큼 쓰레드 할 당
 이유: 동시에 여러 사용자를 처리 못하면 서버 프로그램이라고 할 수 없고 대부분의 경우 접속된 사용자의 수만큼 스레드를 만드는 방식
 단점 : 접속 중인 사용자의 수가 늘어날경우 어느정도 수치 이상으로 올라갈 경우 성능이 저하된다.(오버헤드가 생김)

해결방법: IOCP , 비동기 I/O
 -최종적으로 CPU가 컨텍스트 스위칭 하는 수를 줄이게 됨

멀티스레드 서버 프로그래밍의 문제점을 해결하기 위해 만들어진 것이 IOCP
 - 적은 수의 스레드로 최대한의 요청을 처리하기 위한 방법

IOCP 
- 운영체제는 큐에 결과가 있고 관련 스레드들 중에서 놀고 있는 놈이 있으면 그 스레드가 결과를 받아서 다음 작업을
수행할 수 있게 해준다.
 즉, 스레드를 여러개 만들어 놓고 필요할때 놀고있는 스레드 가져다가 큐에서 비동기I/O 결과 읽어서 처리하게 하는것


Win32 API의 CreateThread 대신 C Run Time Library의 _beginthreadex를 써야하는 경우 

1.부동 소수형 변수나 함수를 사용할 경우
2.C의 malloc과 free나 C++ 의 new와 delete 를 사용할경우 
3.stdio.h 나 io.h에서 어떤 함수를 호출한다면
4.strtok() 나 rand() 와 같이 정적 버퍼를 사용 하는 어떤 런타임 함수를 호출할 경우

위 이유 아니면 CreateThread 사용하는게 안전하다.

//////
메인스레드가 종료되면 다른 쓰레드도 종료되니
메인쓰레드는 다른쓰레드 종료되고 나서 종료하면 문제가 해결된다.
WaitForMultipleObjects();
/////